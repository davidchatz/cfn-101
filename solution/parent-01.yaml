---
AWSTemplateFormatVersion: "2010-09-09"

Description: Writing your first cloudformation templates

Transform: AWS::LanguageExtensions

Parameters:

  # Bucket where to find template
  Bucket:
    Type: String

  # Parameters for stack templates
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Description: The CIDR block for the VPC

Resources:

  # Assume template is called network.yaml in target S3 bucket
  network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.${AWS::Region}.amazonaws.com/network-08.yaml"
      Parameters:
        VpcCidr: !Ref VpcCidr
        # Calculate CIDR blocks for subnets, no need to hard code them here
        PublicCidr: !Select [ 0, Fn::Cidr: [ !Ref VpcCidr, 16, 12 ] ]
        AppCidr: !Select [ 1, Fn::Cidr: [ !Ref VpcCidr, 16, 12 ] ]
        DatabaseCidr: !Select [ 2, Fn::Cidr: [ !Ref VpcCidr, 16, 12 ] ]


Outputs:

  # Use ~GetAtt to return a different attribute from a resource, including outputs from nested stack
  VpcId:
    Value: !GetAtt network.Outputs.VpcId

  PublicSubnetIds:
    Value: !GetAtt network.Outputs.PublicSubnetIds
    # Export the subnet IDs so other stacks outside this master template may refer to these resources
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetIds"

  AppSubnetIds:
    Value: !GetAtt network.Outputs.AppSubnetIds
    Export:
      Name: !Sub "${AWS::StackName}-AppSubnetIds"

  DatabaseSubnetIds:
    Value: !GetAtt network.Outputs.DatabaseSubnetIds
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseSubnetIds"